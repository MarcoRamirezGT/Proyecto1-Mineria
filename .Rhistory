length(which(db$`Clase de union` ==3&&db$`A単o de registro`==2010))
#Conteo
length(which(db$`Clase de union` ==3&db$`A単o de registro`==2010))
#Conteo
length(which(db$`Clase de union` ==3&db$`A単o de registro`==2010))
View(edadParejaAlMenosUnMenor)
diffMayor<-edadParejaAlMenosUnMenor[order(diff)]
edadParejaAlMenosUnMenor$diff<-abs( edadParejaAlMenosUnMenor$`Edad del hombre`-edadParejaAlMenosUnMenor$`Edad de la mujer`)
View(edadParejaAlMenosUnMenor)
diffMayor<-edadParejaAlMenosUnMenor[order(diff)]
str(edadParejaAlMenosUnMenor)
diffMayor<-edadParejaAlMenosUnMenor[order(edadParejaAlMenosUnMenor$diff)]
diffMayor<-edadParejaAlMenosUnMenor[order(edadParejaAlMenosUnMenor)]
diffMayor<-edadParejaAlMenosUnMenor[order(diff)]
diffMayor<-edadParejaAlMenosUnMenor[order(edadParejaAlMenosUnMenor$diff)]
edadParejaAlMenosUnMenor<-data.frame(edadParejaAlMenosUnMenor)
diffMayor<-edadParejaAlMenosUnMenor[order(edadParejaAlMenosUnMenor$diff)]
diffMayor<-edadParejaAlMenosUnMenor[order(edadParejaAlMenosUnMenor$diff)]
edadParejaAlMenosUnMenor
View(edadParejaAlMenosUnMenor)
edadParejaAlMenosUnMenor$diff<-abs( edadParejaAlMenosUnMenor$`Edad del hombre`-edadParejaAlMenosUnMenor$`Edad de la mujer`)
diffMayor<-edadParejaAlMenosUnMenor[order(edadParejaAlMenosUnMenor$diff)]
edadParejaAlMenosUnMenor[order(edadParejaAlMenosUnMenor$diff)]
diffMayor<-data.frame(edadParejaAlMenosUnMenor$diff)
View(diffMayor)
diffMayor<-data.frame(c(edadParejaAlMenosUnMenor$diff))
View(diffMayor)
colnames(diffMayor)[1]<-Diferencia
colnames(diffMayor)[1]<-'Diferencia'
View(diffMayor)
diffMayor<-order(diffMayor)
diffMayor[order(diffMayor)]
View(diffMayor)
ordeDif<-diffMayor[order(diffMayor)]
View(ordeDif)
ordeDif<-data.frame(ordeDif)
View(ordeDif)
edadParejaAlMenosUnMenor$diff<-abs( edadParejaAlMenosUnMenor$`Edad del hombre`-edadParejaAlMenosUnMenor$`Edad de la mujer`)
diffMayor<-data.frame(c(edadParejaAlMenosUnMenor$diff))
colnames(diffMayor)[1]<-'Diferencia'
edadParejaAlMenosUnMenor$diff<-abs( edadParejaAlMenosUnMenor$`Edad del hombre`-edadParejaAlMenosUnMenor$`Edad de la mujer`)
source("D:/Users/MAQUITO/Desktop/UVG/UVG S7/Mineria de datos/Proyecto1/Proyecto1-Mineria/ScriptExploratorioM.R", encoding = 'UTF-8', echo=TRUE)
order(diffMayor)
order(diffMayor$Diferencia)
diffMayor<-head(diffMayor,n=5)
View(diffMayor)
ggplot(data=diffMayor, aes(x=Diferencia, y='',fill=Diferencia)) +
geom_bar(stat="identity", position=position_dodge())+
geom_text(aes(label=Diferencia), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5)+
labs(title="Escolaridad de las mujeres", y="Cantidad")+
theme(legend.position="none")
ggplot(data=diffMayor, aes(x='', y=Diferencia,fill=Diferencia)) +
geom_bar(stat="identity", position=position_dodge())+
geom_text(aes(label=Diferencia), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5)+
labs(title="Escolaridad de las mujeres", y="Cantidad")+
theme(legend.position="none")
ggplot(data=diffMayor, aes(x=Diferencia, y=Diferencia,fill=Diferencia)) +
geom_bar(stat="identity", position=position_dodge())+
geom_text(aes(label=Diferencia), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5)+
labs(title="Escolaridad de las mujeres", y="Cantidad")+
theme(legend.position="none")
View(diffMayor)
diffMayor[order(diffMayor)]
diffMayor[order(diffMayor$Diferencia)]
diffMayor<-head(order(diffMayor),n=5)
diffMayor<-head(diffMayor,n=5)
View(diffMayor)
ggplot(data=diffMayor, aes(x=Diferencia, y=Diferencia,fill=Diferencia)) +
geom_bar(stat="identity", position=position_dodge())+
geom_text(aes(label=Diferencia), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5)+
labs(title="Escolaridad de las mujeres", y="Cantidad")+
theme(legend.position="none")
edadParejaAlMenosUnMenor$diff<-abs( edadParejaAlMenosUnMenor$`Edad del hombre`-edadParejaAlMenosUnMenor$`Edad de la mujer`)
diffMayor<-data.frame(c(edadParejaAlMenosUnMenor$diff))
colnames(diffMayor)[1]<-'Diferencia'
View(diffMayor)
diffMayor<-head(diffMayor,n=5)
ggplot(data=diffMayor, aes(x=Diferencia, y=Diferencia,fill=Diferencia)) +
geom_bar(stat="identity", position=position_dodge())+
geom_text(aes(label=Diferencia), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5)+
labs(title="Escolaridad de las mujeres", y="Cantidad")+
theme(legend.position="none")
diffMayor %>% arrange(desc(Diferencia))
edadParejaAlMenosUnMenor$diff<-abs( edadParejaAlMenosUnMenor$`Edad del hombre`-edadParejaAlMenosUnMenor$`Edad de la mujer`)
diffMayor<-data.frame(c(edadParejaAlMenosUnMenor$diff))
colnames(diffMayor)[1]<-'Diferencia'
diffMayor %>% arrange(desc(Diferencia))
View(diffMayor)
diffMayor<-diffMayor %>% arrange(desc(Diferencia))
View(diffMayor)
diffMayor<-head(diffMayor,n=5)
ggplot(data=diffMayor, aes(x=Diferencia, y=Diferencia,fill=Diferencia)) +
geom_bar(stat="identity", position=position_dodge())+
geom_text(aes(label=Diferencia), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5)+
labs(title="Escolaridad de las mujeres", y="Cantidad")+
theme(legend.position="none")
diffEdades<-ggplot(data=diffMayor, aes(x=Diferencia, y=Diferencia,fill=Diferencia)) +
geom_bar(stat="identity", position=position_dodge())+
geom_text(aes(label=Diferencia), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5)+
labs(title="Diferencia de edades entre los matrimonios con un menor de edad", y="Diferencia de edades")+
theme(legend.position="none")
diffEdades<-ggplot(data=diffMayor, aes(x=Diferencia, y=Diferencia,fill=Diferencia)) +
geom_bar(stat="identity", position=position_dodge())+
geom_text(aes(label=Diferencia), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5)+
labs(title="Diferencia de edades entre los matrimonios con un menor de edad", y="Diferencia de edades")+
theme(legend.position="none")
diffEdades
diffEdades
edadParejaAlMenosUnMenor$diff<-abs( edadParejaAlMenosUnMenor$`Edad del hombre`-edadParejaAlMenosUnMenor$`Edad de la mujer`)
diffMayor<-data.frame(c(edadParejaAlMenosUnMenor$diff))
colnames(diffMayor)[1]<-'Diferencia'
diffMayor<-diffMayor %>% arrange(desc(Diferencia))
View(diffMayor)
edadParejaAlMenosUnMenor$diff<-abs( edadParejaAlMenosUnMenor$`Edad del hombre`-edadParejaAlMenosUnMenor$`Edad de la mujer`)
diffMayor<-data.frame(c(edadParejaAlMenosUnMenor$diff))
colnames(diffMayor)[1]<-'Diferencia'
diffMayor<-diffMayor %>% arrange(desc(Diferencia))
View(diffMayor)
diffMayorN<-head(diffMayor,n=5)
diffEdades<-ggplot(data=diffMayorN, aes(x=Diferencia, y=Diferencia,fill=Diferencia)) +
geom_bar(stat="identity", position=position_dodge())+
geom_text(aes(label=Diferencia), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5)+
labs(title="Diferencia de edades entre los matrimonios con un menor de edad", y="Diferencia de edades")+
theme(legend.position="none")
diffEdades
diffMayor
diffGroup<-diffMayor %>%
group_by(Diferencia) %>%
tally()
View(diffGroup)
View(diffGroup)
diffGroup<-head(diffGroup,n=7)
View(diffGroup)
diffEdadesG<-ggplot(data=diffGroup, aes(x=Diferencia, y=n,fill=Diferencia)) +
geom_bar(stat="identity", position=position_dodge())+
geom_text(aes(label=n), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5)+
labs(title="Cantidad de diferencia de edades", y="Diferencia de edades")+
theme(legend.position="none")
diffEdadesG
diffGroup$Diferencia<-as.factor(diffGroup$Diferencia)
diffEdadesG<-ggplot(data=diffGroup, aes(x=Diferencia, y=n,fill=Diferencia)) +
geom_bar(stat="identity", position=position_dodge())+
geom_text(aes(label=n), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5)+
labs(title="Cantidad de diferencia de edades", y="Diferencia de edades")+
theme(legend.position="none")
diffEdadesG
source("D:/Users/MAQUITO/Desktop/UVG/UVG S7/Mineria de datos/Proyecto1/Proyecto1-Mineria/ScriptExploratorioM.R", encoding = 'UTF-8', echo=TRUE)
table(db$`Municipio de ocurrencia`)
#table(db$`Municipio de ocurrencia`)
table(db$`Dia de ocurrencia`)
table(db$`Mes de ocurrencia`)
table(db$`A単o de ocurrencia`)
library(tidyverse)
db <- readRDS("db10_20.rds")
source("D:/Users/MAQUITO/Desktop/UVG/UVG S7/Mineria de datos/Proyecto1/Proyecto1-Mineria/Regresion.R", echo=TRUE)
library(e1071)
library(caret)
source("D:/Users/MAQUITO/Desktop/UVG/UVG S7/Mineria de datos/Proyecto1/Proyecto1-Mineria/Regresion.R", echo=TRUE)
source("D:/Users/MAQUITO/Desktop/UVG/UVG S7/Mineria de datos/Proyecto1/Proyecto1-Mineria/Naive Bayes.R", echo=TRUE)
library(tidyverse)
library("e1071")
library(caret)
library('MLmetrics')
db <- readRDS("db10_20.rds")
View(db)
#View(db)
#Bayes
#Usamos el 70% de datos
porcentaje<-0.7
#El experimento debe ser repetible
set.seed(1234)
corte <- sample(nrow(db),nrow(db)*porcentaje)
#Entrenamiento
train<-db[corte,]
#Prueba
test<-db[-corte,]
View(train)
## Build the Model ##
View(db.Ho)
## Build the Model ##
View(db)
# use NB classifier
NB = naiveBayes(train$`Clase de union` ~.,train,laplace = 0.01)
# Predict with Test Data
predicted_value = predict(NB,test)
expected_value = factor(test$`Clase de union`)
#Creating confusion matrix
confuisonMatrix <- confusionMatrix(data=predicted_value, reference = expected_value)
confuisonMatrix
#Display results
confuisonMatrix
Accuracy(predicted_value,expected_value)
table(expected_value,predicted_value)
#Modelo2
NB = naiveBayes(train$`Clase de union` ~.,train)
# Predict with Test Data
predicted_value = predict(NB,test)
expected_value = factor(test$`Clase de union`)
#Creating confusion matrix
confuisonMatrix <- confusionMatrix(data=predicted_value, reference = expected_value)
#Display results
confuisonMatrix
Accuracy(predicted_value,expected_value)
table(expected_value,predicted_value)
#Modelo3
# use NB classifier
NB = naiveBayes(train$`Clase de union` ~.,train,laplace = 3)
# Predict with Test Data
predicted_value = predict(NB,test)
expected_value = factor(test$`Clase de union`)
#Creating confusion matrix
confuisonMatrix <- confusionMatrix(data=predicted_value, reference = expected_value)
#Display results
confuisonMatrix
Accuracy(predicted_value,expected_value)
table(expected_value,predicted_value)
#Modelo 1 : Variable respuesta Escolaridad del hombre y mujer
#Escolaridad del hombre
NB = naiveBayes(train$`Escolaridad del hombre` ~.,train,laplace = 0.01)
# Predict with Test Data
predicted_value = predict(NB,test)
expected_value = factor(test$`Escolaridad del hombre`)
#Creating confusion matrix
confuisonMatrix <- confusionMatrix(data=predicted_value, reference = expected_value)
#Display results
confuisonMatrix
Accuracy(predicted_value,expected_value)
table(expected_value,predicted_value)
#Escolaridad de la mujer
NB = naiveBayes(train$`Escolaridad de la mujer` ~.,train,laplace = 3)
# Predict with Test Data
predicted_value = predict(NB,test)
expected_value = factor(test$`Escolaridad de la mujer`)
#Creating confusion matrix
confuisonMatrix <- confusionMatrix(data=predicted_value, reference = expected_value)
#Display results
confuisonMatrix
Accuracy(predicted_value,expected_value)
table(expected_value,predicted_value)
library(ModelMetrics)
library(ggplot2)
db <- readRDS("db10_20.rds")
library(tidyverse)
library(ModelMetrics)
library(ggplot2)
#Modelo lineal simple
porcentaje<- 0.7
datos<- readRDS("db10_20.rds")
View(datos)
set.seed(123)
corte <- sample(nrow(datos),nrow(datos)*porcentaje)
train<-datos[corte,]
test<-datos[-corte,]
fitLMPW<-lm(train$`Clase de union` ~ ., data = train)
predL<-predict(fitLMPW, newdata = test)
predL<-predict(fitLMPW, newdata = test)
colnames(train)
str(train)
View(db)
table(db$`Clase de union`)
source("D:/Users/MAQUITO/Desktop/UVG/UVG S7/Mineria de datos/Proyecto1/Proyecto1-Mineria/Naive Bayes.R", echo=TRUE)
predicted_value
rmse()
rmse
library(ModelMetrics)
library(ModelMetrics)
?rmse
rmse()
rmse(test$`Escolaridad de la mujer`,predicted_value)
rmse_escolaridadMujer=rmse(test$`Escolaridad de la mujer`,predicted_value)
#Calcular si tiene o no overfitting
rmse(test$`Clase de union`,predicted_value)
#Calcular si tiene o no overfitting
rmse_union1=rmse(test$`Clase de union`,predicted_value)
#Calcular si tiene o no overfitting
rmse_union2=rmse(test$`Clase de union`,predicted_value)
rmse(test$`Clase de union`,predicted_value)
#Calcular si tiene o no overfitting
rmse_union3=rmse(test$`Clase de union`,predicted_value)
#Calcular si tiene o no overfitting
rmse_escolaridadH=rmse(test$`Clase de union`,predicted_value)
#Calcular si tiene o no overfitting
rmse_escolaridadH=rmse(test$`Escolaridad del hombre`,predicted_value)
source("D:/Users/MAQUITO/Desktop/UVG/UVG S7/Mineria de datos/Proyecto1/Proyecto1-Mineria/Naive Bayes.R", echo=TRUE)
library(tidyverse)
library("e1071")
library(caret)
library(ModelMetrics)
#Bayes
#Usamos el 70% de datos
porcentaje<-0.7
#El experimento debe ser repetible
set.seed(1234)
corte <- sample(nrow(db),nrow(db)*porcentaje)
#Entrenamiento
train<-db[corte,]
#Prueba
test<-db[-corte,]
table(db$`Clase de union`)
#Modelo 1 : Variable respuesta es clase de union
# use NB classifier
NB = naiveBayes(train$`Clase de union` ~.,train,laplace = 0.01)
# Predict with Test Data
predicted_value = predict(NB,test)
expected_value = factor(test$`Clase de union`)
#Creating confusion matrix
confusionMatrix <- confusionMatrix(data=predicted_value, reference = expected_value)
#Display results
confusionMatrix
Accuracy(predicted_value,expected_value)
table(expected_value,predicted_value)
#Calcular si tiene o no overfitting
rmse_union1=rmse(test$`Clase de union`,predicted_value)
rmse_union1
source("D:/Users/MAQUITO/Desktop/UVG/UVG S7/Mineria de datos/Proyecto1/Proyecto1-Mineria/Naive Bayes.R", echo=TRUE)
source("D:/Users/MAQUITO/Desktop/UVG/UVG S7/Mineria de datos/Proyecto1/Proyecto1-Mineria/Naive Bayes.R", echo=TRUE)
library("e1071")
library(caret)
library('MLmetrics')
#Bayes
#Usamos el 70% de datos
porcentaje<-0.7
#El experimento debe ser repetible
set.seed(1234)
corte <- sample(nrow(db),nrow(db)*porcentaje)
#Entrenamiento
train<-db[corte,]
#Prueba
test<-db[-corte,]
table(db$`Clase de union`)
#Modelo 1 : Variable respuesta es clase de union
# use NB classifier
NB = naiveBayes(train$`Clase de union` ~.,train,laplace = 0.01)
# Predict with Test Data
predicted_value = predict(NB,test)
expected_value = factor(test$`Clase de union`)
#Creating confusion matrix
confusionMatrix <- confusionMatrix(data=predicted_value, reference = expected_value)
#Display results
confusionMatrix
Accuracy(predicted_value,expected_value)
table(expected_value,predicted_value)
#Calcular si tiene o no overfitting
rmse_union1=rmse(test$`Clase de union`,predicted_value)
rmse_union1
rmse(test$`Clase de union`,predicted_value)
#Calcular si tiene o no overfitting
library(ModelMetrics)
rmse(test$`Clase de union`,predicted_value)
#Calcular si tiene o no overfitting
library(ModelMetrics)
rmse(test$`Clase de union`,predicted_value)
#Bayes
#Usamos el 70% de datos
porcentaje<-0.7
#El experimento debe ser repetible
set.seed(1234)
corte <- sample(nrow(db),nrow(db)*porcentaje)
source("D:/Users/MAQUITO/Desktop/UVG/UVG S7/Mineria de datos/Proyecto1/Proyecto1-Mineria/Prueba2Fina.R", echo=TRUE)
source("D:/Users/MAQUITO/Desktop/UVG/UVG S7/Mineria de datos/Proyecto1/Proyecto1-Mineria/Prueba2Fina.R", echo=TRUE)
confusionMatrix(data=predicted_value, reference = expected_value)
#Entrenamiento
train<-data[corte,]
test<-data[-corte,]
table(data$`Clase de union`)
predicted_value = predict(m1,test)
predicted_value <- as.factor(predicted_value)
expected_value = factor(test$`Clase de union`)
#Igualar los niveles
levels(expected_value) <- levels(predicted_value)
confusionMatrix(data=predicted_value, reference = expected_value)
confusionMatrix(predicted_value,expected_value)
confusionMatrix(predicted_value,expected_value)
confusionMatrix(predicted_value,expected_value)
Accuracy(predicted_value,expected_value)
predicted_value = predict(m1,test)
predicted_value <- factor(predicted_value)
expected_value = factor(test$`Clase de union`)
#Igualar los niveles
levels(expected_value) <- levels(predicted_value)
confusionMatrix(predicted_value,expected_value)
Accuracy(predicted_value,expected_value)
#Arbol de regresion
library(rpart)
library(caret)
library(tree)
library(rpart.plot)
library(randomForest)
library("e1071")
library('MLmetrics')
data <- readRDS("db10_20.rds")
df<-data[,c("Municipio de registro","Escolaridad del hombre","Escolaridad de la mujer","Grupo etnico del hombre","Grupo etnico de la mujer", "Clase de union")]
ws<-data[,c("Clase de union")]
ws<- haven::as_factor(ws)
m1<-rpart(ws~ ., data = df, method = "anova")
rpart.plot(m1, type = 3, digits = 3, fallen.leaves = TRUE )
#Matriz
porcentaje <- 0.7
set.seed(123)
corte <- sample(nrow(data),nrow(data)*porcentaje)
#Entrenamiento
train<-data[corte,]
test<-data[-corte,]
table(data$`Clase de union`)
predicted_value = predict(m1,test)
predicted_value <- factor(predicted_value)
expected_value = factor(test$`Clase de union`)
#Igualar los niveles
levels(expected_value) <- levels(predicted_value)
confusionMatrix(predicted_value,expected_value)
Accuracy(predicted_value,expected_value)
predicted_value = predict(m1,test)
expected_value = factor(test$`Clase de union`)
#Igualar los niveles
levels(expected_value) <- levels(predicted_value)
Accuracy(predicted_value,expected_value)
confusionMatrix(predicted_value,expected_value)
Accuracy(predicted_value,expected_value)
predicted_value = predict(m1,test)
expected_value = factor(test$`Clase de union`)
#Igualar los niveles
levels(expected_value) <- levels(predicted_value)
confusionMatrix(predicted_value,expected_value)
Accuracy(predicted_value,expected_value)
confusionMatrix(predicted_value,expected_value)
#Arbol de regresion
library(rpart)
library(caret)
library(tree)
library(rpart.plot)
library(randomForest)
library("e1071")
library('MLmetrics')
data <- readRDS("db10_20.rds")
df<-data[,c("Municipio de registro","Escolaridad del hombre","Escolaridad de la mujer","Grupo etnico del hombre","Grupo etnico de la mujer", "Clase de union")]
ws<-data[,c("Clase de union")]
ws<- haven::as_factor(ws)
m1<-rpart(ws~ ., data = df, method = "anova")
rpart.plot(m1, type = 3, digits = 3, fallen.leaves = TRUE )
#Matriz
porcentaje <- 0.7
set.seed(123)
corte <- sample(nrow(data),nrow(data)*porcentaje)
#Entrenamiento
train<-data[corte,]
test<-data[-corte,]
table(data$`Clase de union`)
predicted_value = predict(m1,test)
expected_value = factor(test$`Clase de union`)
confusionMatrix(predicted_value,expected_value)
Accuracy(predicted_value,expected_value)
confusionMatrix(data=predicted_value,reference =expected_value)
confusionMatrix(data=predicted_value,reference =expected_value)
confusionMatrix(data=predicted_value,expected_value)
confusionMatrix(predicted_value,expected_value)
Accuracy(predicted_value,expected_value)
confusionMatrix(predicted_value,expected_value)
confusionMatrix(expected_value,predicted_value)
confusionMatrix(expected_value,predicted_value)
table(expected_value,predicted_value)
Accuracy(predicted_value,expected_value)
confusionMatrix(expected_value,predicted_value)
confusionMatrix(expected_value,predicted_value)
library(ModelMetrics)
?rmse
library("e1071")
library(caret)
library('MLmetrics')
# Read the data into a table from the file
#Prediccion de la variable Clase de union
db <- readRDS("db10_20.rds")
#Bayes
#Usamos el 70% de datos
porcentaje<-0.7
#El experimento debe ser repetible
set.seed(1234)
corte <- sample(nrow(db),nrow(db)*porcentaje)
#Entrenamiento
train<-db[corte,]
#Prueba
test<-db[-corte,]
table(db$`Clase de union`)
#Modelo 1 : Variable respuesta es clase de union
# use NB classifier
NB = naiveBayes(train$`Clase de union` ~.,train,laplace = 0.01)
# Predict with Test Data
predicted_value = predict(NB,test)
expected_value = factor(test$`Clase de union`)
#Creating confusion matrix
confusionMatrix <- confusionMatrix(data=predicted_value, reference = expected_value)
#Display results
confusionMatrix
Accuracy(predicted_value,expected_value)
table(expected_value,predicted_value)
rmse_union1=rmse(test$`Clase de union`,predicted_value)
rmse(test$`Clase de union`,predicted_value)
rmse_union1=rmse(predicted_value,test$`Clase de union`)
rmse(predicted_value,test$`Clase de union`)
rmse(train$`Clase de union`,predicted_value)
rmse(db$`Clase de union`,predicted_value)
rmse(test$`Clase de union`,predicted_value)
