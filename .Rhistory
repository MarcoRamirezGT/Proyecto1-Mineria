show.legend = FALSE) +
coord_polar(theta = "y")+theme(legend.position = "bottom")+
labs(title="Porcentaje de matrimonios donde uno es menor de edad")
pregunta1
pregunta2
pregunta3
#Resumen de la edad de la mujer
summary(replace(db$`Edad de la mujer`, db$`Edad de la mujer`==999, NA), na.rm = TRUE)
#Resumen hombre
summary(replace(db$`Edad del hombre`, db$`Edad del hombre`==999, NA), na.rm = TRUE)
pregunta4
pregunta5
pregunta6
PreguntaEscolaridad
PreguntaEscolaridadMujer
summary(db)
source("D:/Users/MAQUITO/Desktop/UVG/UVG S7/Mineria de datos/Proyecto1/Proyecto1-Mineria/Clustering.R", encoding = 'UTF-8', echo=TRUE)
is.na(db[,6:7])
sum(is.na(db[,6:7]))
rowSums(db)
rowSums(db[,6:7])
hopkins(db[,6:7])
source("D:/Users/MAQUITO/Desktop/UVG/UVG S7/Mineria de datos/Proyecto1/Proyecto1-Mineria/Clustering.R", encoding = 'UTF-8', echo=TRUE)
db<-data.frame(db)
db<-db[complete.cases(db),]
summary(db)
db[,6:7]<-scale(db[,6:7])
hopkins(db[,6:7])
View(db[,6:7])
#Descripcion de los datos
set.seed(123)
db<-data.frame(db)
db<-db[complete.cases(db),]
summary(db)
db[,6:7]<-scale(db[,6:7])
hopkins(db[,6:7])
View(temp)
hopkins(db[,6:7])
db<-na.omit(db)
summary(db)
db[,6:7]<-scale(db[,6:7])
hopkins(db[,6:7])
hopkins(db[,6:7])
db<-db[complete.cases(db),]
summary(db)
db[,6:7]<-scale(db[,6:7])
hopkins(db[,6:7])
0
wss=0
wss=0
for (i in 1:10)
wss[i] <- sum(kmeans(db[,6:7], centers=i)$withinss)
wss=0
for (i in 1:10)
wss[i] <- sum(kmeans(db[,6:7], centers=i)$withinss)
plot(1:10, wss, type="b", xlab="Number of Clusters",  ylab="Within groups sum of squares")
datos<-datos[complete.cases(readRDS("db10_20.rds")),]
source("D:/Users/MAQUITO/Desktop/UVG/UVG S7/Mineria de datos/Proyecto1/Proyecto1-Mineria/Clustering.R", encoding = 'UTF-8', echo=TRUE)
hopkins(clusteringVar)
hopkins(clusteringVar)
hopkins(clusteringVar)
View(clusteringVar)
View(clusteringVar)
hopkins(clusteringVar)
str(clusteringVar)
str(clusteringVar)
str(cle)
str(cle)
remove_labels(cle)
remove_var_label
remove_labels(
x,
user_na_to_na = FALSE,
keep_var_label = FALSE,
user_na_to_tagged_na = FALSE
)
remove_all_labels
library(dplyr)
remove_var_label
library(tidyverse)
remove_all_labels
get_labels
get_labels(cle)
remove_labels()
datos<-datos[complete.cases(datos),]
edH<-datos[,'Edad del hombre']
edM<-datos[,'Edad de la mujer']
cle<-data.frame(edH,edM)
clusteringVar<-scale(cle)
hopkins(clusteringVar)
str(cle)
str(db)
#Descripcion de los datos
set.seed(123)
edH<-subset(db,select = 'Edad del hombre')
edH<-subset(db,select = 'Edad del hombre')
edH<-subset(db,select = c('Edad del hombre'))
edaH<-subset(db, select=c('Edad del hombre','Edad de la mujer','Año de registro'))
db<-data.frame(db)
edaH<-subset(db, select=c('Edad del hombre','Edad de la mujer','Año de registro'))
source("D:/Users/MAQUITO/Desktop/UVG/UVG S7/Mineria de datos/Proyecto1/Proyecto1-Mineria/Clustering.R", encoding = 'UTF-8', echo=TRUE)
edaH<-db[,'Edad del hombre']
edaH<-db[,'Edad del hombre']
db<-data.frame(db)
str(db)
edaH<-db[,'Edad del hombre']
library(tidyverse)
#Descripcion de los datos
set.seed(123)
db<-data.frame(db)
edaH<-db[,'Edad del hombre']
source("D:/Users/MAQUITO/Desktop/UVG/UVG S7/Mineria de datos/Proyecto1/Proyecto1-Mineria/Clustering.R", encoding = 'UTF-8', echo=TRUE)
#Matriz de distancia
datos_dist<- dist(clusterVar)
fviz_dist(datos_dist, show_labels = F)
#Descripcion de los datos
#Experimento repetible
set.seed(123)
datos<-db[complete.cases(db),]
datos<-data.frame(datos)
summary(datos)
df<-head(datos,n=1000)
EdadH<-c(df[,6])
EdadM<-c(df[,7])
cle<-data.frame(EdadH,EdadM)
#clusterVar<-df[,6:7]
#Normalizado
clusterVar<-scale(cle)
set.seed(123)
hopkins(clusterVar)
#Matriz de distancia
datos_dist<- dist(clusterVar)
fviz_dist(datos_dist, show_labels = F)
wss=0
for (i in 1:10)
wss[i] <- sum(kmeans(df[,6:7], centers=i)$withinss)
plot(1:10, wss, type="b", xlab="Number of Clusters",  ylab="Within groups sum of squares")
km<-kmeans(clusterVar,3,iter.max =100)
datos$grupo<-km$cluster
km<-kmeans(clusterVar,3,iter.max =100)
df$grupo<-km$cluster
km
km<-kmeans(clusterVar,3,iter.max =100)
cle$grupo<-km$cluster
km<-kmeans(clusterVar,3,iter.max =100)
df$grupo<-km$cluster
plotcluster(clusterVar,km$cluster)
datos<-db[complete.cases(db),]
datos<-data.frame(datos)
summary(datos)
datos<-data.frame(datos)
summary(datos)
datos<-head(datos,n=1000)
nrow(Datos)
nrow(datos)
#Normalizado
datos[,6:7]<-scale(datos[,6:7])
set.seed(123)
hopkins(datos[,6:7])
#Matriz de distancia
datos_dist<- dist(datos[,6:7])
wss=0
wss=0
for (i in 1:10)
wss[i] <- sum(kmeans(datos[,6:7], centers=i)$withinss)
plot(1:10, wss, type="b", xlab="Number of Clusters",  ylab="Within groups sum of squares")
wss=0
for (i in 1:10)
wss[i] <- sum(kmeans(db[,6:7], centers=i)$withinss)
plot(1:10, wss, type="b", xlab="Number of Clusters",  ylab="Within groups sum of squares")
wss=0
for (i in 1:10)
wss[i] <- sum(kmeans(datos[,6:7], centers=i)$withinss)
plot(1:10, wss, type="b", xlab="Number of Clusters",  ylab="Within groups sum of squares")
wss=0
for (i in 1:10)
wss[i] <- sum(kmeans(db[,6:7], centers=i)$withinss)
plot(1:10, wss, type="b", xlab="Number of Clusters",  ylab="Within groups sum of squares")
fviz_nbclust(datos[,6:7], kmeans, method = "wss") +
labs(subtitle = "Elbow method")
nb <- NbClust(datos[,6:7], distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="all")
km<-kmeans(datos[,6:7],2,iter.max =100)
km<-kmeans(datos[,6:7],2,iter.max =100)
datos$grupo<-km$cluster
km
plotcluster(datos[,6:7],km$cluster)
fviz_cluster(km, data = datos[,6:7],geom = "point", ellipse.type = "norm")
km$size
km$withinss
#Metodo de silueta
silkm<-silhouette(km$cluster,dist(datos[,6:7]))
mean(silkm[,2])
mean(silkm[,3])
datos<-db[complete.cases(db),]
datos<-data.frame(datos)
summary(datos)
#Muestra de 1000
datos<-head(datos,n=1000)
#Normalizado
datos[,6:7]<-scale(datos[,6:7])
set.seed(123)
hopkins(datos[,6:7])
#Matriz de distancia
datos_dist<- dist(datos[,6:7])
wss=0
for (i in 1:10)
wss[i] <- sum(kmeans(db[,6:7], centers=i)$withinss)
plot(1:10, wss, type="b", xlab="Number of Clusters",  ylab="Within groups sum of squares")
#Paquete NbClust
nb <- NbClust(datos[,6:7], distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="all")
km<-kmeans(datos[,6:7],3,iter.max =100)
datos$grupo<-km$cluster
plotcluster(datos[,6:7],km$cluster)
fviz_cluster(km, data = datos[,6:7],geom = "point", ellipse.type = "norm")
#Metodo de silueta
silkm<-silhouette(km$cluster,dist(datos[,6:7]))
mean(silkm[,2])
mean(silkm[,3])
#Paquete NbClust
nb <- NbClust(datos[,6:7], distance = "euclidean", min.nc = 3,
max.nc = 10, method = "complete", index ="all")
km<-kmeans(datos[,6:7],3,iter.max =100)
datos$grupo<-km$cluster
plotcluster(datos[,6:7],km$cluster)
fviz_cluster(km, data = datos[,6:7],geom = "point", ellipse.type = "norm")
#Metodo de silueta
silkm<-silhouette(km$cluster,dist(datos[,6:7]))
mean(silkm[,3])
#Descripcion de los datos
#Experimento repetible
set.seed(123)
datos<-db[complete.cases(db),]
datos<-data.frame(datos)
summary(datos)
#Muestra de 1000
datos<-head(datos,n=1000)
#Normalizado
datos<-scale(datos)
set.seed(123)
hopkins(datos)
#Descripcion de los datos
#Experimento repetible
set.seed(123)
datos<-db[complete.cases(db),]
datos<-data.frame(datos)
summary(datos)
#Muestra de 1000
datos<-head(datos,n=1000)
#Normalizado
datos[,6:7]<-scale(datos[,6:7])
set.seed(123)
hopkins(datos[,6:7])
#Matriz de distancia
datos_dist<- dist(datos[,6:7])
wss=0
for (i in 1:10)
wss[i] <- sum(kmeans(db[,6:7], centers=i)$withinss)
plot(1:10, wss, type="b", xlab="Number of Clusters",  ylab="Within groups sum of squares")
#Matriz de distancia
datos_dist<- dist(datos[,6:7])
fviz_dist(datos_dist, show_labels = F)
#Paquete NbClust
nb <- NbClust(datos[,6:7], distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="alllong")
#Muestra de aleatoria de 1000
datos<-sample(nrow(datos),size=1000,replace=FALSE)
View(datos)
nrow(datos)
#Muestra de aleatoria de 1000
datos<-datos [ sample ( nrow (datos), n = 1000 ),]
#Muestra de aleatoria de 1000
datos<-datos [ sample ( nrow (datos), size = 1000 ),]
muestramia<- sample(1:nrow(datos),size=n,replace=FALSE)
#Muestra de 1000
# datos<-head(datos,n=1000)
n<-30
muestramia<- sample(1:nrow(datos),size=n,replace=FALSE)
muestramia<- sample(1:nrow(datos),size=n,replace=FALSE)
muestramia<- sample(nrow(datos),size=n,replace=FALSE)
library(SamplingUtil)
library(SamplingUtil)
library(SamplingUtil)
muestramia<- sample(1:nrow(crime),size=n,replace=FALSE)
muestramia<- sample(1:nrow(datos),size=n,replace=FALSE)
muestramia<- sample(1:nrow(datos),size=n,replace=FALSE)
muestramia<- sample(nrow(datos),size=n,replace=FALSE)
library(SamplingUtil)
install.packages('SamplingUtil')
library(SamplingUtil)
install.packages('SamplingUtil')
install_github("DFJL/SamplingUtil")
install.packages("devtools")
library(devtools)
install_github("DFJL/SamplingUtil")
library(SamplingUtil)
muestrasis<- sys.sample(N=nrow(datos),n=30)
muestrasis<- sys.sample(N=nrow(datos),n=30)
#Muestra de 1000
# datos<-head(datos,n=1000)
View(datos)
#Descripcion de los datos
#Experimento repetible
set.seed(123)
datos<-db[complete.cases(db),]
datos<-data.frame(datos)
summary(datos)
#Muestra de 1000
# datos<-head(datos,n=1000)
View(datos)
muestrasis<- sys.sample(N=nrow(datos),n=30)
muestrasis
View(muestrasis)
muestrasis<- datos[sample(nrow(datos), 3), ]
View(muestrasis)
n=1000
datos<- datos[sample(nrow(datos), n), ]
View(datos)
View(datos)
source("D:/Users/MAQUITO/Desktop/UVG/UVG S7/Mineria de datos/Proyecto1/Proyecto1-Mineria/Clustering.R", encoding = 'UTF-8', echo=TRUE)
View(datos)
nrow(datos)
#Normalizado
datos[,6:7]<-scale(datos[,6:7])
set.seed(123)
hopkins(datos[,6:7])
#Matriz de distancia
datos_dist<- dist(datos[,6:7])
wss=0
for (i in 1:10)
wss[i] <- sum(kmeans(db[,6:7], centers=i)$withinss)
plot(1:10, wss, type="b", xlab="Number of Clusters",  ylab="Within groups sum of squares")
#Elbow
fviz_nbclust(datos[,6:7], kmeans, method = "wss") +  labs(subtitle = "Elbow method")
#Silhoutte
fviz_nbclust(datos[,6:7], kmeans, method = "silhouette") +  labs(subtitle = "Elbow method")
#Elbow
fviz_nbclust(datos[,6:7], kmeans, method = "wss") +  labs(subtitle = "Elbow method")
#Silhoutte
fviz_nbclust(datos[,6:7], kmeans, method = "silhouette") +  labs(subtitle = "silhouette method")
#Paquete NbClust
nb <- NbClust(datos[,6:7], distance = "euclidean", min.nc = 2,max.nc = 10, method = "complete", index ="all")
km<-kmeans(datos[,6:7],3,iter.max =100)
datos$grupo<-km$cluster
plotcluster(datos[,6:7],km$cluster)
km
fviz_cluster(km, data = datos[,6:7],geom = "point", ellipse.type = "norm")
fviz_cluster(km, data = datos,geom = "point", ellipse.type = "norm")
fviz_cluster(km, data = datos[,6:7],geom = "point", ellipse.type = "norm")
#Metodo de silueta
silkm<-silhouette(km$cluster,dist(datos[,6:7]))
mean(silkm[,3])
km$size
#Descripcion de los datos
#Experimento repetible
set.seed(123)
datos<-db[complete.cases(db),]
datos<-data.frame(datos)
summary(datos)
datos<- datos[sample(nrow(datos), 1000), ]
#Normalizado
datos[,6:7]<-scale(datos[,6:7])
set.seed(123)
hopkins(datos[,6:7])
#Matriz de distancia
datos_dist<- dist(datos[,6:7])
wss=0
for (i in 1:10)
wss[i] <- sum(kmeans(db[,6:7], centers=i)$withinss)
plot(1:10, wss, type="b", xlab="Number of Clusters",  ylab="Within groups sum of squares")
#Elbow
fviz_nbclust(datos[,6:7], kmeans, method = "wss") +  labs(subtitle = "Elbow method")
#Silhoutte
fviz_nbclust(datos[,6:7], kmeans, method = "silhouette") +  labs(subtitle = "silhouette method")
#Paquete NbClust
nb <- NbClust(datos[,6:7], distance = "euclidean", min.nc = 2,max.nc = 10, method = "complete", index ="all")
km<-kmeans(datos[,6:7],3,iter.max =100)
datos$grupo<-km$cluster
plotcluster(datos[,6:7],km$cluster)
fviz_cluster(km, data = datos[,6:7],geom = "point", ellipse.type = "norm")
#Metodo de silueta
silkm<-silhouette(km$cluster,dist(datos[,6:7]))
mean(silkm[,3])
km<-kmeans(datos[,6:7],2,iter.max =100)
datos$grupo<-km$cluster
plotcluster(datos[,6:7],km$cluster)
fviz_cluster(km, data = datos[,6:7],geom = "point", ellipse.type = "norm")
#Metodo de silueta
silkm<-silhouette(km$cluster,dist(datos[,6:7]))
mean(silkm[,2])
km<-kmeans(datos[,6:7],3,iter.max =100)
datos$grupo<-km$cluster
plotcluster(datos[,6:7],km$cluster)
fviz_cluster(km, data = datos[,6:7],geom = "point", ellipse.type = "norm")
#Metodo de silueta
silkm<-silhouette(km$cluster,dist(datos[,6:7]))
k2<- kmeans(datos[,6:7],centers=3,nstart = 25)
str(k2)
fviz_cluster(k2,data=datos)
fviz_cluster(k2,data=datos[,6:7])
balanced_clustering <- function(x, K, method = "centroid") {
input_validation_anticlustering(x, K, "distance", method, TRUE, NULL, NULL)
data <- to_matrix(x)
if (method == "ilp") {
return(balanced_cluster_editing(data, K))
}
nn_centroid_clustering(data, NROW(data) / K)
}
balanced_clustering(datos[6:7],3,method = 'centroid')
library(anticlust)
install.packages("anticlust")
library(anticlust)
balanced_clustering(datos[6:7],3,method = 'centroid')
#Descripcion de los datos
#Experimento repetible
set.seed(123)
datos<-db[complete.cases(db),]
datos<-data.frame(datos)
summary(datos)
datos<- datos[sample(nrow(datos), 1000), ]
#Normalizado
datos[,6:7]<-scale(datos[,6:7])
set.seed(123)
hopkins(datos[,6:7])
#Matriz de distancia
datos_dist<- dist(datos[,6:7])
wss=0
for (i in 1:10)
wss[i] <- sum(kmeans(db[,6:7], centers=i)$withinss)
plot(1:10, wss, type="b", xlab="Number of Clusters",  ylab="Within groups sum of squares")
#Elbow
fviz_nbclust(datos[,6:7], kmeans, method = "wss") +  labs(subtitle = "Elbow method")
#Silhoutte
fviz_nbclust(datos[,6:7], kmeans, method = "silhouette") +  labs(subtitle = "silhouette method")
#Paquete NbClust
nb <- NbClust(datos[,6:7], distance = "euclidean", min.nc = 2,max.nc = 10, method = "complete", index ="all")
km<-kmeans(datos[,6:7],3,iter.max =100)
km<-kmeans(datos[,6:7],3,iter.max =1000)
datos$grupo<-km$cluster
plotcluster(datos[,6:7],km$cluster)
km<-kmeans(datos[,6:7],3,iter.max =10)
datos$grupo<-km$cluster
plotcluster(datos[,6:7],km$cluster)
km<-kmeans(datos[,6:7],3)
datos$grupo<-km$cluster
plotcluster(datos[,6:7],km$cluster)
fviz_cluster(km, data = datos[,6:7],geom = "point", ellipse.type = "norm")
#Metodo de silueta
silkm<-silhouette(km$cluster,dist(datos[,6:7]))
mean(silkm[,3])
k2<- kmeans(datos[,6:7],centers=3,nstart = 25)
fviz_cluster(k2,data=datos[,6:7])
fviz_cluster(km,
datos[,6:7],
labelsize = 6,
choose.vars = c("Sepal.Width","Sepal.Length"),
main="k=3 grupos")
fviz_cluster(km,
datos[,6:7],
labelsize = 6,
choose.vars = c("Sepal.Width","Sepal.Length"),
main="k=3 grupos")
fviz_cluster(k2,data=datos[,6:7],labelsize = 6)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
db <- readRDS("db10_20.rds")
#Metodo de silueta
silkm<-silhouette(km$cluster,dist(datos[,6:7]))
mean(silkm[,3])
plot(silkm, cex.names=.4, col=1:3)
hombres_ext<-subset(db, select=c('Nacionalidad del hombre'),db$`Nacionalidad del hombre`!=320)
library(tidyverse)
db <- readRDS("db10_20.rds")
hombres_ext<-subset(db, select=c('Nacionalidad del hombre'),db$`Nacionalidad del hombre`!=320)
hombres<-nrow(hombres_ext)
hombres
mujeres_ext<-subset(db, select=c('Nacionalidad de la mujer'),db$`Nacionalidad de la mujer`!=320)
mujeres<-nrow(mujeres_ext)
mujeres
hombres_ext<-subset(db, select=c('Nacionalidad del hombre'),db$`Nacionalidad del hombre`!=320)
hombres1<-nrow(hombres_ext)
mujeres_ext<-subset(db, select=c('Nacionalidad de la mujer'),db$`Nacionalidad de la mujer`!=320)
mujeres1<-nrow(mujeres_ext)
extran<-c(hombres1, mujeres1)
extranjerosgtT<-(hombres1 + mujeres1)
extraT<-c(extranjerosgtT)
df<-data.frame(extran, extraT)
View(df)
df$extran<-as.factor(df$extran)
pregunta1Ed<-ggplot(data=df, aes(x=reorder(extraT,extran), y=extran, fill=extraT)) +
geom_bar(stat="identity", position=position_dodge())+
geom_text(aes(label=extran), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5)+
labs(title="Cantidad de extranjeros registrados en Guatemala ", x="Total de Extranjeros", y="Datos Hombres y Mujeres")+theme(legend.position="none")
# Maximo de bodas registradas en un dia
dep<-db[,'Dia de ocurrencia']
depocu<-subset(dep, select=c('Dia de ocurrencia'),db$`Dia de ocurrencia` != 0)
dep1<-data.frame(depocu)
nde<-aggregate(dep1$dep, dep1, length)
View(nde)
D<-c(nde$depocu)
C<-c(nde$x)
df<-data.frame(D,C)
df$D<-as.factor(df$D)
ask1<-df[order(-df$C),]
ask1f<-head(ask1,n=5)
pregunta2ED<-ggplot(data=ask1f, aes(x=reorder(D,-C), y=C, fill=D)) +
geom_bar(stat="identity", position=position_dodge())+
geom_text(aes(label=C), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5)+
labs(title="Maximo de bodas registradas en un dia ", x="Dia", y="Cantidad de bodas")+theme(legend.position="none")
